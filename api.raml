#%RAML 1.0
title: passbook-server
version: v1
#baseUri: https://passbook-server.run.aws-usw02-pr.ice.predix.io/api/{version}
baseUri: http://localhost:5353/api/v1
baseUriParameters:
  version:
    type:
      - string
    default: v1
protocols:
  - HTTPS
  - HTTP
mediaType: application/json
types:

  #Pass
  Pass:
    type: object
    description:  A pass is identified by pass type ID and serial number. This table includes a last-update tag (such as a time stamp) for when the pass was last updated, and typically includes whatever data you need to generate the actual pass.
    properties:
      _id: string
      logoText: string
      description: string
      type:
        default: generic
      locations?: array
      maxDistance: number
      labelColor: string
      foregroundColor: string
      backgroundColor: string
      suppressStripShine: boolean
      authenticationToken: string
      organizationName: string
      passTypeIdentifier: string
      teamIdentifier: string
      serialNumber: string
      webServiceURL: string
      formatVersion: number
      lastUpdated: datetime
      barcode:
        type: object
        required: false
  # Registration
  Registration:
    type: object
    description: A registration is a relationship between a device and a pass.
    properties:
      _id: string
      created: datetime
      updated: datetime
      docType: string
      device_id: string
      pass_id: string
      serialNumber: string
      passTypeIdentifier: string
      deviceLibraryIdentifier: string
  # Device
  Device:
    type: object
    description: A device is identified by its device library identifier
    properties:
      id: number
      optional?: string
      expanded:
        type: object
        properties:
          count: number



/devices/{deviceId}/registrations/{passTypeIdentifier}/{serialNumber}:
  description: |
    Any time the pass is updated, your server sends a push notification with an empty JSON dictionary as the payload to the device using the given push notification token. This process continues until the device is explicitly unregistered (as described in Unregistering a Device).
  uriParameters:
    deviceId:
      type:
        - string
      example: fbbb0ae201d1378b639f96f9381c3675
      description: A unique identifier that is used to identify and authenticate this device in future requests.
      default: '1234'
    passTypeIdentifier:
      type:
        - string
      description: The pass type identifier as specified in the pass.
      example: 'pass.io.passbookmanager.test'
    serialNumber:
      type:
        - string
      example: '0000-0000-0000-7'
      description: The passâ€™s serial number, as specified in the pass.
  post:
    body:
    responses:
      200:
        description: Serial number is already registered for this device, returns HTTP status 200.
        body:
          application/json:
            example: |
              {
                "docType": "registration",
                "device_id": "device-1234",
                "pass_id": "pass-passbookmanager-io-1eadfc60-895a-4e96-9bd1-988101e64ef0",
                "created": 1476284819366,
                "updated": 1476284819366,
                "serial_number": "1eadfc60-895a-4e96-9bd1-988101e64ef0",
                "pass_type_id": "pass.passbookmanager.io",
                "auth_token": "ApplePass 1eadfc60-895a-4e96-9bd1-988101e64ef0",
                "deviceLibraryIdentifier": "1234",
                "_id": "registration-device-1234",
                "_rev": "1-9d1559c06cb9953f1e201473b7b9753d"
              }
      201:
        description: Registration succeeds, returns HTTP status 201.
        body:
          application/json:
            example: |
              {
                "message": "value"
              }
      401:
        description: Request is not authorized, returns HTTP status 401.
        body:
          application/json:
            example: |
              {
                "message": "value"
              }
  get:
    body:
      application/json:
    responses:
      200:

/passTypeIdentifier:
  description: Create a new passTypeIdentifier and .pem file generated.
  post:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message" : "Hello World"
              }
    body:
      multipart/form-data:
        type:
          - string



/_admin/db:
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message" : "Hello World"
              }


/admin/passes/{id}:
  uriParameters:
    id: string
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message" : "Hello World"
              }
/_browse:
